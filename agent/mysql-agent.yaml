openapi: 3.0.1
info:
  contact:
    email: contact@blaqkube.io
  description: |
    Agent used by
    [blaqkube MySQL operator](http://github.com/blaqkube/mysql-operator) to
    manage MySQL backup/restore
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://blaqkube.io/terms/
  title: blaqkube MySQL agent
  version: 0.0.1
externalDocs:
  description: Find out more about blaqkube MySQL operator
  url: https://blaqkube.io/docs
servers:
  - url: /
tags:
  - description: data about your MySQL database
    name: mysql
paths:
  /backup:
    post:
      operationId: createBackup
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Backup"
        description: Create a manual backup
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Backup"
          description: Backup Created
        "405":
          content: {}
          description: Invalid input
      security:
        - api_key: []
      summary: create an on-demand backup
      tags:
        - mysql
  /backup/{backup}:
    delete:
      operationId: deleteBackup
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Backup to delete
          explode: false
          in: path
          name: backup
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Backup not found
      security:
        - api_key: []
      summary: Deletes a backup
      tags:
        - mysql
    get:
      description: Returns a single backup set of properties
      operationId: getBackupByName
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Name of the backup to return
          explode: false
          in: path
          name: backup
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Backup"
          description: successful operation
        "400":
          content: {}
          description: Invalid Backup supplied
        "404":
          content: {}
          description: Backup not found
      security:
        - api_key: []
      summary: Get backup properties
      tags:
        - mysql
  /database:
    post:
      operationId: createDatabase
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Database"
        description: Create a Database
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
          description: Backup Created
      security:
        - api_key: []
      summary: create an on-demand database
      tags:
        - mysql
  /database/{database}:
    delete:
      operationId: deleteDatabase
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Database to delete
          explode: false
          in: path
          name: database
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          content: {}
          description: Invalid Database supplied
        "404":
          content: {}
          description: Database not found
      security:
        - api_key: []
      summary: Deletes a database
      tags:
        - mysql
    get:
      description: Returns the database properties
      operationId: getDatabaseByName
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Name of the database to return
          explode: false
          in: path
          name: database
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
          description: successful operation
        "400":
          content: {}
          description: Invalid Database supplied
        "404":
          content: {}
          description: Database not found
      security:
        - api_key: []
      summary: Get Database properties
      tags:
        - mysql
  /user:
    post:
      operationId: createUser
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Create a user
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: User Created
      security:
        - api_key: []
      summary: create an on-demand user
      tags:
        - mysql
  /user/{user}:
    delete:
      operationId: deleteUser
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: User to delete
          explode: false
          in: path
          name: user
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          content: {}
          description: Invalid User supplied
        "404":
          content: {}
          description: User not found
      security:
        - api_key: []
      summary: Deletes a user
      tags:
        - mysql
    get:
      description: Returns the user properties
      operationId: getUserByName
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Name of the user to return
          explode: false
          in: path
          name: user
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: successful operation
        "400":
          content: {}
          description: Invalid User supplied
        "404":
          content: {}
          description: User not found
      security:
        - api_key: []
      summary: Get user properties
      tags:
        - mysql
components:
  schemas:
    AWSConfig:
      properties:
        aws_access_key_id:
          type: string
        aws_secret_access_key:
          type: string
        region:
          type: string
      type: object
    Database:
      example:
        name: mydb
      required:
        - name
      type: object
    Grant:
      example:
        database: blue
        accessMode: readwrite
      properties:
        database:
          type: string
        accessMode:
          type: string
      required:
        - database
      type: object
    Backup:
      example:
        s3access:
          bucket: backup.blaqkube.io
          path: /blue
      properties:
        location:
          type: string
        timestamp:
          format: date-time
          type: string
        s3access:
          $ref: "#/components/schemas/S3Info"
        status:
          description: backup status
          enum:
            - Available
            - Failed
            - Pending
            - Running
          type: string
        message:
          description: keep message in case of an error
          type: string
      required:
        - s3access
      type: object
    S3Info:
      properties:
        bucket:
          type: string
        path:
          type: string
        awsConfig:
          $ref: "#/components/schemas/AWSConfig"
      required:
        - bucket
      type: object
    User:
      example:
        username: myuser
        password: changeme
        grants:
          - database: blue
            accessMode: readwrite
          - database: red
            accessMode: readonly
      properties:
        username:
          type: string
        password:
          type: string
        grants:
          items:
            $ref: "#/components/schemas/Grant"
          type: array
      required:
        - password
        - username
      type: object
  securitySchemes:
    api_key:
      in: header
      name: api_key
      type: apiKey
