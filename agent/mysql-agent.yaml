openapi: 3.0.1
info:
  contact:
    email: contact@blaqkube.io
  description: |
    Agent used by
    [blaqkube MySQL operator](http://github.com/blaqkube/mysql-operator) to
    manage MySQL backup/restore
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://blaqkube.io/terms/
  title: blaqkube MySQL agent
  version: 0.0.1
externalDocs:
  description: Find out more about blaqkube MySQL operator
  url: https://blaqkube.io/docs
servers:
- url: /
tags:
- description: data about your MySQL database
  name: mysql
paths:
  /backup:
    post:
      operationId: createBackup
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backup'
        description: Create a manual backup
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
          description: Backup Created
        "405":
          content: {}
          description: Invalid input
      security:
      - api_key: []
      summary: create an on-demand backup
      tags:
      - mysql
    get:
      description: Returns a backup list
      operationId: getBackups
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupList'
          description: successful operation
        "400":
          content: {}
          description: Invalid Backup supplied
        "404":
          content: {}
          description: Backup not found
      security:
      - api_key: []
      summary: Get backup properties
      tags:
      - mysql
  /database:
    get:
      operationId: getDatabases
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listDatabases'
          description: List of databases
      security:
      - api_key: []
      summary: list all databases
      tags:
      - mysql
    post:
      operationId: createDatabase
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
        description: Create a Database
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
          description: Database Created
      security:
      - api_key: []
      summary: create an on-demand database
      tags:
      - mysql
  /database/{database}:
    delete:
      operationId: deleteDatabase
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Database to delete
        explode: false
        in: path
        name: database
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid Database supplied
        "404":
          content: {}
          description: Database not found
      security:
      - api_key: []
      summary: Deletes a database
      tags:
      - mysql
    get:
      description: Returns the database properties
      operationId: getDatabaseByName
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Name of the database to return
        explode: false
        in: path
        name: database
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
          description: successful operation
        "400":
          content: {}
          description: Invalid Database supplied
        "404":
          content: {}
          description: Database not found
      security:
      - api_key: []
      summary: Get Database properties
      tags:
      - mysql
  /user:
    get:
      operationId: getUsers
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUsers'
          description: List of Users
      security:
      - api_key: []
      summary: list all users
      tags:
      - mysql
    post:
      operationId: createUser
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Create a user
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User Created
      security:
      - api_key: []
      summary: create an on-demand user
      tags:
      - mysql
  /user/{user}:
    delete:
      operationId: deleteUser
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: User to delete
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid User supplied
        "404":
          content: {}
          description: User not found
      security:
      - api_key: []
      summary: Deletes a user
      tags:
      - mysql
    get:
      description: Returns the user properties
      operationId: getUserByName
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Name of the user to return
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          content: {}
          description: Invalid User supplied
        "404":
          content: {}
          description: User not found
      security:
      - api_key: []
      summary: Get user properties
      tags:
      - mysql
components:
  schemas:
    EnvVar:
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
      type: object
    Backup:
      example:
        bucket: backup.blaqkube.io
        location: /blue/mybackup.dmp
        env:
          - name: AWS_REGION
            value: eu-west-1
      properties:
        bucket:
          type: string
        location:
          type: string
        env:
          items:
            $ref: '#/components/schemas/EnvVar'
          type: array
        timestamp:
          format: date-time
          type: string
        status:
          description: backup status
          enum:
          - Available
          - Failed
          - Pending
          - Running
          type: string
        message:
          description: keep message in case of an error
          nullable: true
          type: string
      required:
      - bucket
      - path
      type: object
    BackupList:
      example:
        size: 1
        items:
        - bucket: backup.blaqkube.io
          location: /blue/mybackup.dmp
      properties:
        size:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/Backup'
          type: array
      type: object
    Database:
      example:
        name: mydb
      properties:
        name:
          type: string
      required:
      - name
      type: object
    Grant:
      example:
        database: blue
        accessMode: readwrite
      properties:
        database:
          type: string
        accessMode:
          type: string
      required:
      - database
      type: object
    listDatabases:
      example:
        size: 1
        items:
        - name: mydb
      properties:
        size:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/Database'
          type: array
      type: object
    listUsers:
      example:
        size: 1
        items:
        - username: me
          password: "**"
      properties:
        size:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    Message:
      example:
        code: 200
        message: Success
      properties:
        code:
          type: integer
        message:
          type: string
      required:
      - code
      type: object
    User:
      example:
        username: myuser
        password: changeme
        grants:
        - database: blue
          accessMode: readwrite
        - database: red
          accessMode: readonly
      properties:
        username:
          type: string
        password:
          type: string
        grants:
          items:
            $ref: '#/components/schemas/Grant'
          type: array
      required:
      - password
      - username
      type: object
  securitySchemes:
    api_key:
      in: header
      name: api_key
      type: apiKey
