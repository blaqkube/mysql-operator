/*
 * blaqkube MySQL agent
 *
 * Agent used by [blaqkube MySQL operator](http://github.com/blaqkube/mysql-operator) to manage MySQL backup/restore
 *
 * API version: 0.0.1
 * Contact: contact@blaqkube.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package user

import (
	"database/sql"
	"errors"
	"fmt"

	openapi "github.com/blaqkube/mysql-operator/agent/go"
	_ "github.com/go-sql-driver/mysql"
)

// MysqlUserService is a service that implents the logic for the MysqlUserServicer
// This service should implement the business logic for every endpoint for the MysqlUser API.
// Include any external packages or services that will be required by this service.
type MysqlUserService struct {
}

// NewMysqlUserService creates a default api service
func NewMysqlUserService() MysqlUserServicer {
	return &MysqlUserService{}
}

// CreateUser - create an on-demand user
func (s *MysqlUserService) CreateUser(user openapi.User, apiKey string) (interface{}, error) {
	// TODO - update CreateUser with the required logic for this service method.
	// Add api_mysql_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	fmt.Printf("Connect to database\n")
	db, err := sql.Open("mysql", "root@tcp(127.0.0.1:3306)/")
	defer db.Close()
	if err != nil {
		fmt.Printf("Error %v\n", err)
		return nil, err
	}
	var name string
	err = db.QueryRow("SELECT user FROM mysql.user where user=?", user.Username).Scan(&name)
	if err == nil {
		return user, nil
	} else if err != sql.ErrNoRows {
		return nil, err
	}
	sql := fmt.Sprintf(
		"create user '%s'@'%%' identified by '%s'",
		user.Username,
		user.Password,
	)
	fmt.Println(sql)
	_, err = db.Exec(sql)
	if err != nil {
		fmt.Printf("Error %v\n", err)
		return nil, err
	}
	for _, v := range user.Grants {
		sql = fmt.Sprintf("GRANT ALL PRIVILEGES ON %s.* TO '%s'@'%%'", v.Database, user.Username)
		fmt.Println(sql)
		_, err = db.Exec(sql)
		if err != nil {
			fmt.Printf("Error granting privileges; %v\n", err)
			return nil, err
		}
	}
	return user, nil
}

// DeleteUser - Deletes a user
func (s *MysqlUserService) DeleteUser(user string, apiKey string) (interface{}, error) {
	// TODO - update DeleteUser with the required logic for this service method.
	// Add api_mysql_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'DeleteUser' not implemented")
}

// GetUserByName - Get user properties
func (s *MysqlUserService) GetUserByName(user string, apiKey string) (interface{}, error) {
	// TODO - update GetUserByName with the required logic for this service method.
	// Add api_mysql_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	db, err := sql.Open("mysql", "root@tcp(127.0.0.1:3306)/")
	defer db.Close()
	if err != nil {
		fmt.Printf("Error %v\n", err)
		return nil, err
	}
	var name string
	err = db.QueryRow("SELECT User FROM mysql.user where User=?", user).Scan(&name)
	if err != nil {
		fmt.Printf("Error %v\n", err)
		return nil, err
	}
	if user != name {
		return nil, errors.New("User not found")
	}
	return openapi.User{Username: name}, nil
}

// GetUsers - list all users
func (s *MysqlUserService) GetUsers(apiKey string) (interface{}, error) {
	db, err := sql.Open("mysql", "root@tcp(127.0.0.1:3306)/")
	defer db.Close()
	if err != nil {
		return nil, err
	}
	results, err := db.Query("SELECT User FROM mysql.user WHERE Host='%'")
	if err != nil {
		return nil, err
	}
	users := []openapi.User{}
	count := int32(0)
	for results.Next() {
		var name string
		err = results.Scan(&name)
		user := openapi.User{Username: name}
		users = append(users, user)
		count++
	}
	return openapi.ListUsers{
		Size:  count,
		Items: users,
	}, nil
}
